class Solution {
using ll=int;
struct TrieNode {
    TrieNode* child[26];
    bool wordEnd;

    TrieNode() {
        wordEnd = false;
        for (int i = 0; i < 26; i++) {
            child[i] = nullptr;
        }
    }
};
void insertKey(TrieNode* root, const string& key) {
    TrieNode* curr = root;
    for (char c : key) {
        if (curr->child[c - 'a'] == nullptr) {
            TrieNode* newNode = new TrieNode();
            curr->child[c - 'a'] = newNode;
        }
        curr = curr->child[c - 'a'];
    }
    curr->wordEnd = 1;
}
public:
    int minValidStrings(vector<string>&w, string t) {
        ll n=t.size();

        TrieNode* root = new TrieNode();
        for(ll i=0; i<w.size(); i++){
            insertKey(root, w[i]);
        }
        
        vector<ll>dp(n+1);

        for(ll i=n-1; i>=0; i--){
            TrieNode* temp=root;
            ll ans=1e9;
            for(ll j=i; j<n; j++){
                ll id=(t[j]-'a');
                if(temp->child[id]==NULL) break;
                temp=temp->child[id];
                ans=min(ans,1+dp[j+1]);
            }
            dp[i]=ans;
        }
        ll ans=dp[0];
        return ans==1e9 ? -1 : ans;
    }
};
